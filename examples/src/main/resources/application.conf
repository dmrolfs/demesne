conference-context-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka {
  loglevel = DEBUG

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552"
    ]

    auto-down-unreachable-after = 10s
  }

  persistence {
    journal.plugin = "akka.persistence.journal.leveldb-shared"
    journal.leveldb-shared.store {
      # DO NOT USE 'native = off' IN PRODUCTION !!!
      native = off
      dir = "target/shared-journal"
    }
    snapshot-store.local.dir = "target/snapshots"
  }
}

akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  actor {
    kryo  {
      type = "graph"
      idstrategy = "incremental"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      post-serialization-transformations = "lz4,aes"
      encryption {
        aes {
          mode = "AES/CBC/PKCS5Padding"
          key = "8fjF%F4d$w!ZPUfu"
          IV-length = 16
        }
      }
      implicit-registration-logging = true
      kryo-trace = false
      resolve-subclasses = false
      //      mappings {
      //        "package1.name1.className1" = 20,
      //        "package2.name2.className2" = 21
      //      }
      classes = [
        "demesne.EventLike"
      ]
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kyro = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "demesne.EventLike" = kyro
      "scala.Option" = kyro
    }
  }
}
